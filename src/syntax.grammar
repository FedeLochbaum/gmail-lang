@precedence {
  and @left,
  or @left,
  minus @left
}

@top Query { QueryFilter }
@skip { whitespace }

QueryFilter { Filter | CompositeFilter | lparen QueryFilter rparen }

Filter { Keyword colon Expr MatchArgument | FilterExpr }

CompositeFilter { FilterOrOp | FilterAndOp | FilterMinus }

FilterOrOp[@name=OR] { QueryFilter !or or QueryFilter }
FilterAndOp[@name=AND] { QueryFilter !and and QueryFilter }
FilterMinus[@name=MINUS] { QueryFilter !minus minus QueryFilter }

MatchArgument { NoArgument | Argument }
NoArgument { '' }
Argument { Expr }

Expr { ID | String | ShortID | Date | Number | Email | lparen Expr rparen | ExprOp }

ExprOp { lparen BinaryOp rparen }

BinaryOp { OrOp | AndOp | MinusOp }

OrOp[@name=OR] { Expr !or or Expr }
AndOp[@name=AND] { Expr !and and Expr }
MinusOp[@name=MINUS] { Expr !minus minus Expr }

Keyword {
  From | To | Cc | Bcc | Subject | Label | Has | List |
  Filename | After | Before | Older | Newer | OlderThan |
  NewerThan | Is | In | Deliveredto | Category | Size | Larger | Smaller
}

FilterExpr { ID | String | Email | ExactMatch }

ExactMatch { "+" FilterExpr }

// Filter Keywords
From { from }
To { to }
Cc { cc }
Bcc { bcc }
Subject { subject }
Label { label }
Has { has }
List { list }
Filename { filename }
After { after }
Before { before }
Older { older }
Newer { newer }
OlderThan { older_than }
NewerThan { newer_than }
Is { is }
In { in }
Deliveredto { deliveredto }
Category { category }
Size { size }
Larger { larger }
Smaller { smaller }

Number { number }
Date { date }
Email { email }
ID { variable }
ShortID { shortVariable }

@tokens {
  @precedence {
    date, number, or, and, minus, email, from, to, cc, bcc, subject, label, has, list, filename,
    after, before, older, newer, older_than, newer_than, is, in, deliveredto, category, size, larger,
    smaller, variable, shortVariable, whitespace
  }

  identifierChar { std.asciiLetter | $[\.] | $[_$\u{a1}-\u{10ffff}] }
  word { identifierChar (identifierChar | std.digit)* }
  identifier { word }
  identifierWithSpaces { lVarDelimiter ![\n]* rVarDelimiter }

  variable { identifier }
  String { '"' (!["\\] | "\\" _)* '"' }
  number { ('+' | '-')? int frac? exp?  }
  int  { '0' | $[1-9] std.digit* }
  frac { dot std.digit+ }
  exp  { $[eE] $[+\-]? std.digit+ }
  date { dateFormat }
  dateFormat { int+ "/" int+ "/" int+ }
  email { variable "@" variable dot variable  }
  shortVariable { std.digit+ std.asciiLetter }
  
  lparen { "(" }
  rparen { ")" }
  colon { ":" }
  dot { '.' }

  minus { "-" }
  or { "or" | "OR" }
  and { "and" | "AND" }

  // whitespaces
  whitespace { std.whitespace+ }

  from { "from" }
  to { "to" }
  cc { "cc" }
  bcc { "bcc" }
  subject { "subject" }
  label { "label" }
  has { "has" }
  list { "list" }
  filename { "filename" }
  after { "after" }
  before { "before" }
  older { "older" }
  newer { "newer" }
  older_than { "older_than" }
  newer_than { "newer_than" }
  is { "is" }
  in { "in" }
  deliveredto { "deliveredto" }
  category { "category" }
  size { "size" }
  larger { "larger" }
  smaller { "smaller" }
}

@detectDelim
